// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct particle{
float3 position;
float3 direction;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> PointMap;
RWTexture2D<float4> VelocityMap;

RWTexture2D<float4> VolumeMap;

RWStructuredBuffer<uint> MortonCodes;
StructuredBuffer<particle> inputPoints;
RWStructuredBuffer<float3> pointVelocities;
RWStructuredBuffer<particle> returnPoints;

float DeltaTime;


// Inverse of Part1By1 - "delete" all odd-indexed bits
uint Compact1By1(uint x)
{
  x &= 0x55555555;                  // x = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
  x = (x ^ (x >>  1)) & 0x33333333; // x = --fe --dc --ba --98 --76 --54 --32 --10
  x = (x ^ (x >>  2)) & 0x0f0f0f0f; // x = ---- fedc ---- ba98 ---- 7654 ---- 3210
  x = (x ^ (x >>  4)) & 0x00ff00ff; // x = ---- ---- fedc ba98 ---- ---- 7654 3210
  x = (x ^ (x >>  8)) & 0x0000ffff; // x = ---- ---- ---- ---- fedc ba98 7654 3210
  return x;
}

// Inverse of Part1By2 - "delete" all bits not at positions divisible by 3
uint Compact1By2(uint x)
{
  x &= 0x09249249;                  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
  x = (x ^ (x >>  2)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
  x = (x ^ (x >>  4)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
  x = (x ^ (x >>  8)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
  x = (x ^ (x >> 16)) & 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210
  return x;
}

uint DecodeMorton3X(uint code)
{
  return Compact1By2(code >> 0);
}

uint DecodeMorton3Y(uint code)
{
  return Compact1By2(code >> 1);
}

uint DecodeMorton3Z(uint code)
{
  return Compact1By2(code >> 2);
}

float3 DecodeMortornToVector(uint code){

uint x = DecodeMorton3X(code);
uint y = DecodeMorton3Y(code);
uint z = DecodeMorton3Z(code);

return float3(x,y,z);
}

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!

	float3 curPoint = inputPoints[id.x].position;
	float3 velocity = inputPoints[id.x].direction;

	//uint3 volumePos = uint3(curPoint.x *10 ,curPoint.y * 10,curPoint.z * 10);
	//VolumeMap[volumePos.xy] = float4(curPoint, 1);

	if(curPoint.y > 2){
	velocity.y *= -1;//curPoint.y -=  DeltaTime;
	}else if(curPoint.y < -2){
	velocity.y *= -1;
	}

	if(curPoint.x > 2){
	velocity.x *= -1;
	}else if(curPoint.x < -2 ){
	velocity.x *= -1;
	}


	float3 dirToCenter = normalize(curPoint);
	
	velocity -= dirToCenter * 1 * DeltaTime;

	float3 invVelocity = float3(velocity.x,velocity.z,velocity.y);
	float3 angularVel = normalize(cross(velocity, invVelocity)) * 0.1;

	curPoint +=velocity * DeltaTime * 0.1;
	curPoint += angularVel * DeltaTime;
	//if(checkCollision(volumePos, curPoint)){
	//velocity *= -1;
	//}
	//velocity *= checkCollision(volumePos, curPoint);


	returnPoints[id.x].direction = velocity;
	returnPoints[id.x].position = curPoint;
}

