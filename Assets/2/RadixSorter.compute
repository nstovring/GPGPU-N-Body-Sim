// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSCount
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWTexture2D<int> countMatrix;
RWTexture2D<int> offsetMatrix;

RWStructuredBuffer<float3> pointBuffer;
RWStructuredBuffer<uint> mortonIds;
RWStructuredBuffer<uint> offsetTable;

int count;
// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
uint expandBits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
uint morton3D(float x, float y, float z)
{
    x = min(max(x * 1024.0f, 0.0f), 1023.0f);
    y = min(max(y * 1024.0f, 0.0f), 1023.0f);
    z = min(max(z * 1024.0f, 0.0f), 1023.0f);
    uint xx = expandBits((uint)x);
    uint yy = expandBits((uint)y);
    uint zz = expandBits((uint)z);
    return xx * 4 + yy * 2 + zz;
}


// Inverse of Part1By1 - "delete" all odd-indexed bits
uint Compact1By1(uint x)
{
  x &= 0x55555555;                  // x = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
  x = (x ^ (x >>  1)) & 0x33333333; // x = --fe --dc --ba --98 --76 --54 --32 --10
  x = (x ^ (x >>  2)) & 0x0f0f0f0f; // x = ---- fedc ---- ba98 ---- 7654 ---- 3210
  x = (x ^ (x >>  4)) & 0x00ff00ff; // x = ---- ---- fedc ba98 ---- ---- 7654 3210
  x = (x ^ (x >>  8)) & 0x0000ffff; // x = ---- ---- ---- ---- fedc ba98 7654 3210
  return x;
}

// Inverse of Part1By2 - "delete" all bits not at positions divisible by 3
uint Compact1By2(uint x)
{
  x &= 0x09249249;                  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
  x = (x ^ (x >>  2)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
  x = (x ^ (x >>  4)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
  x = (x ^ (x >>  8)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
  x = (x ^ (x >> 16)) & 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210
  return x;
}

uint DecodeMorton3X(uint code)
{
  return Compact1By2(code >> 0);
}

uint DecodeMorton3Y(uint code)
{
  return Compact1By2(code >> 1);
}

uint DecodeMorton3Z(uint code)
{
  return Compact1By2(code >> 2);
}

float3 DecodeMortornToVector(uint code){

uint x = DecodeMorton3X(code);
uint y = DecodeMorton3Y(code);
uint z = DecodeMorton3Z(code);

return float3(x,y,z);
}

[numthreads(32,1,1)]
void CSCount(uint3 id : SV_DispatchThreadID, uint gindex : SV_GROUPINDEX, uint3 gid : SV_GROUPTHREADID){
	uint morton = mortonIds[id.x];
	int chunckSize = count/32;
	int chunckPos = chunckSize*gindex + (id.x);
	for (int i = 0; i < 2 ; i++){
		int bit0N = morton & (1 << i);
		int2 index = int2(bit0N, i);
		countMatrix[index.xy]++;
	}
}

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint gindex : SV_GROUPINDEX, uint3 gid : SV_GROUPTHREADID)
{
	float3 particlePos =  pointBuffer[id.x]; 
	uint mortonid = morton3D(particlePos.x,particlePos.y,particlePos.z);
	mortonIds[id.x] = mortonid;
	GroupMemoryBarrierWithGroupSync();
}
